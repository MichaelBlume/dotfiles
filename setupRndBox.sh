#!/bin/bash
#
# set up an RnD box so it can be used for performance testing
# Specifically:
# - disable auto-puppet
# - wipe ALL iptables rules
# - add all rnd boxes to /etc/hosts
# - make sure 0mq is installed in /usr/lib
# 
# then, if we're a test* box
# - make sure /opt/beSolr/beSolr has the correct ZK_ARGS, LIB_ARGS, and Xmx values
# - ensure Loggly.properties has the correct splitter.locate.hosts value
#
# otherwise, if we're a hammer* box
# - make sure 

# first, remove the puppet cron job so our changes don't get undone
#
if [ -e /etc/cron.d/puppet ]
then
    echo `date` ": INFO : Removing puppet cron file"
    sudo rm /etc/cron.d/puppet
else
    echo `date` ": WARN : Puppet cron file already removed"
fi

# next, wipe all iptables rules. We'll rely on AWS security to keep things safe
#
# note: this is a bit more dangerous in a colo.
echo `date` ": INFO : Clearing iptables rules"
sudo iptables -F INPUT
sudo iptables -F OUTPUT


# first, make sure we have the internal IPs of all of the other boxes in the cluster in /etc/hosts
#
# this list was generated using the following command...
#     cat /etc/truth.json|  awk '/"[a-z0-9]+"/{h = $1}/private/{print $2,h}'| sed -e 's/"//g' -e 's/,//' -e 's/://' | sort -k 2 | grep -v gsd3 | grep -v niz | awk '{print $1 "\t" $2 " " $2 ".rnd.loggly.net"}'
#
# but we can't use that on a box were puppet is having problems, so its a here doc for now (sigh)
#

if grep autogenerated /etc/hosts > /dev/null 2>&1
then
    echo `date` ": WARN : Skipping /etc/hosts changes - already done"
else
    NOW=`date`
    cat <<EOF | grep -v $HOSTNAME > /tmp/allHosts

# All hosts in RnD cluster - autogenerated by $0 on $NOW
#

10.115.77.76	hammer08 hammer08.rnd.loggly.net
10.82.18.65	hammer13 hammer13.rnd.loggly.net

10.156.162.43	test08 test08.rnd.loggly.net
10.156.162.96	test13 test13.rnd.loggly.net

# All hosts in colo2

10.0.36.213	solr15-01 solr15-01.colo2.loggly.net
10.0.36.214	solr15-02 solr15-02.colo2.loggly.net

EOF

    cat /etc/hosts /tmp/allHosts > /tmp/etcHosts
    echo `date` ": INFO : Setting up /etc/hosts"
    sudo mv /etc/hosts /etc/hosts.`date +%Y%m%d.%H%M%S.%N`
    sudo mv /tmp/etcHosts /etc/hosts
fi

echo `date` ": INFO : Downloading tarballs"
cd /opt
for  filename  in beHammer beSolr hammer.test.opt solr.test.opt zk.version-2 zmq.prod.usr.lib zookeeper.test.version-2 zoto.log
do
    fullname=$filename.tgz
    if [ -e /opt/$fullname ]
    then
        echo `date` ": INFO: $fullname already exists"
    else
        echo `date` ": INFO: Downloading $fullname"
        sudo wget http://repo.loggly.org/repo/pool/files/$fullname
    fi
done


cd /usr/lib
if [ -e ./libjzmq.a ]
then
    echo `date` ": WARN : Skipping install of 0mq in /usr/lib - already done"
else
    echo `date` ": INFO : Installing 0mq in /usr/lib"
    sudo tar zxvf /opt/zmq.prod.usr.lib.tgz
fi

########################################################################
#
#                              setupSolr
#
setupSolr () {
    hName="$1"
    sName="$2"
    echo `date` ": INFO : Setting up test box $sName to run solr using $hName"

    echo `date` ": INFO : Shutting down loggly-solrserver"
    supervisorctl stop loggly-solrserver
    
    echo `date` ": INFO : untar'ing beSolr into /opt"
    cd /opt
    sudo rm -rf beSolr
    sudo tar zxvf /opt/solr.test.opt.tgz

    sudo cp /opt/beSolr/dist/solr/solr.xml.Bootstrap /opt/beSolr/dist/solr/solr.xml
    sudo chmod ugo+w /opt/beSolr/dist/solr/solr.xml

    if [ -e /etc/cron.d/expire ]
    then
	echo `date` ": INFO : Skipping creation of /etc/cron.d/expire - already exists"
    else
	echo `date` ": INFO : Creating /etc/cron.d/expire"
	echo "*/5 * * * * curl 'http://localhost:8983/solr/admin/cores?action=expire&cid=1.101.1&time=NOW-20MINUTES'" > /tmp/expire
	sudo cp /tmp/expire /etc/cron.d
    fi

    echo `date` ": INFO : Fixing Loggly.properties for beSolr"
    cd /opt/beSolr/dist/etc
    grep -v hosts Loggly.properties | grep -v 'index.shard.minutes' | grep -v 'delay.addindexer.millis' | grep -v 'index.cores.percent' | grep -v 'index.queue.maxsize' | grep -v 's3.enabled' > /tmp/newProps
    cat <<EOF >> /tmp/newProps

# ****************************** T E S T   S T A R T ******************************
#
# Solr test configs - autogenerated by $0 on $NOW
#

# hosts needed by this solr in RnD cluster 
#
hosts.splitter=$hName
hosts.solr=$sName

# make sure we're using prod values for shard sizes
#
index.shard.minutes=5,30,240,1440,10080

# Let Indexers spin up quicker (one new indexer every 2 seconds)
#
delay.addindexer.millis=5000

# use every available core for indexing (yep, this is dangerous)
#
index.cores.percent=100

# Use a truly monstrous event queue in the indexer so we can slam
# events into solr faster than we can index without worrying too much
# about blowing up
#
index.queue.maxsize=100000000

# Don't use S3
#
s3.enabled=false


# ****************************** T E S T   E N D ******************************

EOF
    sudo cp /tmp/newProps Loggly.properties

    echo `date` ": INFO : Fixing /opt/beSolr/beSolr startup script"
    cd /opt/beSolr
    mem=`grep MemTotal /proc/meminfo  | awk '{print int($2/2)}'`
    sed -e "s/u100401/$hName/" -e "s/Xmx1000m/Xmx${mem}k/" -e "s/jon/rnd/" -e "s/usr\/local\/lib/usr\/lib/" < beSolr > /tmp/newBeSolr
    sudo cp /tmp/newBeSolr beSolr
    sudo chmod ugo+x beSolr

    echo `date` ": INFO : Creating bounceSolr script"
    cat <<EOF > /tmp/bounceSolr
#!/bin/sh
#
# bounce Solr and clean up log files
#
cd /opt/beSolr/dist
../beSolr stop
sleep 2
sudo kill -9 \`ps -ef | grep beSolr | grep -v bounceSolr | grep -v tail | awk '{print \$2}'\`
echo "STOPPED"

if [ ! -e history ]
then
    mkdir history
fi

fgrep IdxM logs/* > run.ended.`date +%Y%m%d.%H%M%S`
sudo rm -rf beSolr.pid logs/* solr/shards/[0-9]*
sudo cp solr/solr.xml.Bootstrap solr/solr.xml
sudo ../beSolr start
sleep 2
curl 'http://localhost:8983/solr/admin/cores?action=setlevels&min=0&max=0'
tail -F logs/beSolr.log logs/beSolr.log
EOF

    sudo cp /tmp/bounceSolr /opt/beSolr/bounceSolr
    sudo chmod ugo+x /opt/beSolr/bounceSolr
    
    echo `date` ": INFO : Setting up shards on /mnt"
    sudo mkdir -p /mnt/test/shards
    sudo chmod ugo+rwx /mnt/test/shards
    sudo rm -rf /opt/beSolr/dist/solr/shards
    sudo ln -s /mnt/test/shards /opt/beSolr/dist/solr/shards
}
# end of setupSolr

########################################################################
#
#                              setupHammer
#
setupHammer() {
    hName="$1"
    sName="$2"
    echo `date` ": INFO : Setting up hammer box $hName for zookeeper, collector, splitter and hammer for use by $sName"
    
    echo `date` ": INFO : Shutting down collector, splitter, tapper, and zookeeper"
    supervisorctl stop becollector-loggly besplitter-loggly
    sudo /etc/init.d/hadoop-zookeeper-server stop


    echo `date` ": INFO : untar'ing collector, splitter hammer into /opt"
    cd /opt
    sudo tar zxvf /opt/hammer.test.opt.tgz

    echo `date` ": INFO : Fixing Loggly.properties for collector"
    cd /opt/beCollector/dist/etc
    grep -v hosts Loggly.properties | grep -v 's3.enabled' > /tmp/newProps
    cat <<EOF >> /tmp/newProps

# ****************************** T E S T   S T A R T ******************************
#
# Collector test configs - autogenerated by $0 on $NOW
#

# hosts needed by this collector in RnD cluster
#
hosts.splitter=localhost
hosts.solr=$sName
splitter.locate.hosts=$sName

# Don't use S3 when testing
#
s3.enabled=false

# ****************************** T E S T   E N D ******************************

EOF
    sudo cp /tmp/newProps Loggly.properties

    echo `date` ": INFO : Fixing beCollector script"
    cd /opt/beCollector
    sed -e 's/usr\/local\/lib/usr\/lib/' < beCollector > /tmp/newBeCollector
    sudo cp /tmp/newBeCollector beCollector

    echo `date` ": INFO : Creating bounceCollector script"
    cat <<EOF > /tmp/bounceCollector
#!/bin/sh
#
# bounce collector and clean up log files
#
cd /opt/beCollector/dist
../beCollector stop
sleep 1
sudo kill -9 \`ps -ef | grep beCollector | grep -v bounceCollector | awk '{print \$2}'\`
echo "STOPPED"
sleep 5
sudo rm beCollector.pid logs/*
sudo ../beCollector start
tail -F logs/beCollector.log logs/beCollector_console.log
EOF

    sudo cp /tmp/bounceCollector /opt/beCollector/bounceCollector
    sudo chmod ugo+x /opt/beCollector/bounceCollector
    ls -l /opt/beCollector


    echo `date` ": INFO : Fixing Loggly.properties for splitter"
    cd /opt/beSplitter/dist/etc
    grep -v hosts Loggly.properties > /tmp/newProps
    cat <<EOF >> /tmp/newProps

# ****************************** T E S T   S T A R T ******************************
#
# Splitter test configs - autogenerated by $0 on $NOW
#

# hosts needed by this splitter in RnD cluster - autogenerated by $0 on $NOW
#
hosts.solr=$sName
splitter.locate.hosts=$sName

# ****************************** T E S T   E N D ******************************
EOF
    sudo cp /tmp/newProps Loggly.properties

    echo `date` ": INFO : Fixing beSplitter script"
    cd /opt/beSplitter
    sed -e 's/usr\/local\/lib/usr\/lib/' < beSplitter > /tmp/newBeSplitter
    sudo cp /tmp/newBeSplitter beSplitter

    echo `date` ": INFO : Creating bounceSplitter script"
    cat <<EOF > /tmp/bounceSplitter
#!/bin/sh
#
# bounce splitter and clean up log files
#
cd /opt/beSplitter/dist
../beSplitter stop
sleep 1
sudo kill -9 \`ps -ef | grep beSplitter | grep -v bounceSplitter | awk '{print \$2}'\`
echo "STOPPED"
sleep 5
sudo rm beSplitter.pid logs/*
sudo ../beSplitter start
tail -F logs/beSplitter.log logs/beSplitter_console.log
EOF

    sudo cp /tmp/bounceSplitter /opt/beSplitter/bounceSplitter
    sudo chmod ugo+x /opt/beSplitter/bounceSplitter
    
    echo `date` ": INFO : Fixing zookeeper to run in standalone mode"
    grep -v 3888 /etc/zookeeper/zoo.cfg | grep -v ensemble > /tmp/newZooCfg
    sudo cp /tmp/newZooCfg /etc/zookeeper/zoo.cfg
    cd /var/zookeeper/
    sudo rm -rf version-2
    sudo tar zxvf /opt/zookeeper.test.version-2.tgz
    sudo rm /mnt/log/zookeeper/zoo*

    echo `date` ": INFO : Starting zookeeper in standalone mode"
    sudo /etc/init.d/hadoop-zookeeper-server start

}


########################################################################
#
#                              MAIN
#
case $HOSTNAME in

    # ==================== Set up a Solr box ====================
    test*)
	myNum=`echo $HOSTNAME | cut -c5,6`
	hName="hammer$myNum"
	sName="test$myNum"
	setupSolr "$hName" "$sName"
	;;

    solr15-02*)
	setupSolr solr15-01 solr15-02
	;;

    # ==================== Set up a Collector, Splitter, Hammer, ZooKeeper box ====================

    hammer*)
	myNum=`echo $HOSTNAME | cut -c7,8`
	hName="hammer$myNum"
	sName="test$myNum"
	setupHammer "$hName" "$sName"
	;;

    solr15-01*)
	setupHammer solr15-01 solr15-02
	;;
esac
