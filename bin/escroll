#!/usr/bin/env runhaskell
import Data.List
import Control.Concurrent
import System.IO

takeBlock :: [String] -> (String, [String])
takeBlock (firstLine:moreLines) = (block, restLines) where
  block = intercalate "\n" (firstLine:indLines)
  (indLines, restLines) = span (isPrefixOf " ") moreLines

data PrintOrSleep = Print String
                  | Sleep Int

processBlock :: String -> [PrintOrSleep] -> [PrintOrSleep]
processBlock block acts = Print block : restActs where
  restActs = if "ERROR" `isInfixOf` block
    then Sleep 5000000 : acts
    else acts

makeBlocks :: [String] -> [String]
makeBlocks [] = []
makeBlocks lines = block : makeBlocks remLines where
  (block, remLines) = takeBlock lines

processStream :: String -> [PrintOrSleep]
processStream = foldr processBlock [] . makeBlocks . lines

actOn :: PrintOrSleep -> IO()
actOn (Sleep usecs) = threadDelay usecs
actOn (Print block) = putStrLn block

main :: IO ()
main = do
  hSetBuffering stdout NoBuffering
  input <- getContents
  mapM_ actOn $ processStream input
