#!/usr/bin/env runhaskell
import Data.List
import System.Posix
import Control.Concurrent

takeBlock :: [String] -> (String, [String])
takeBlock (firstLine:moreLines) = (block, restLines) where
  block = intercalate "\n" (firstLine:indLines)
  (indLines, restLines) = span (isPrefixOf " ") moreLines

data InfoOrError = Error String Int
                 | Info String

processBlock :: String -> InfoOrError
processBlock block = if ("ERROR" `isInfixOf` block)
  then Error block 5000000
  else Info block

makeBlocks [] = []
makeBlocks lines = (block:(makeBlocks remLines)) where
  (block, remLines) = takeBlock lines

processStream :: String -> [InfoOrError]
processStream = map processBlock . makeBlocks . lines

actOn :: InfoOrError -> IO()
actOn (Error block secs) = putStrLn block >> threadDelay secs
actOn (Info block) = putStrLn block

main :: IO ()
main = do
  input <- getContents
  mapM_ actOn $ processStream input
